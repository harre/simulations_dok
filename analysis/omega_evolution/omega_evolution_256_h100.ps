%!PS-Adobe-2.0
%%Title: omega_evolution_256_h100.ps
%%Creator: gnuplot 4.4 patchlevel 2
%%CreationDate: Fri Jun 29 10:09:47 2012
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape true def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -46 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (omega_evolution_256_h100.ps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 2)
  /Author (harre)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Fri Jun 29 10:09:47 2012)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 554 50 lineto 554 770 lineto 50 770 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
doclip
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
/Helvetica findfont 140 scalefont setfont
1.000 UL
LTb
686 448 M
63 0 V
6198 0 R
-63 0 V
stroke
602 448 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.2)]
] -46.7 MRshow
1.000 UL
LTb
686 865 M
63 0 V
6198 0 R
-63 0 V
stroke
602 865 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.3)]
] -46.7 MRshow
1.000 UL
LTb
686 1282 M
63 0 V
6198 0 R
-63 0 V
stroke
602 1282 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.4)]
] -46.7 MRshow
1.000 UL
LTb
686 1699 M
63 0 V
6198 0 R
-63 0 V
stroke
602 1699 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.5)]
] -46.7 MRshow
1.000 UL
LTb
686 2116 M
63 0 V
6198 0 R
-63 0 V
stroke
602 2116 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.6)]
] -46.7 MRshow
1.000 UL
LTb
686 2533 M
63 0 V
6198 0 R
-63 0 V
stroke
602 2533 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.7)]
] -46.7 MRshow
1.000 UL
LTb
686 2951 M
63 0 V
6198 0 R
-63 0 V
stroke
602 2951 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.8)]
] -46.7 MRshow
1.000 UL
LTb
686 3368 M
63 0 V
6198 0 R
-63 0 V
stroke
602 3368 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.9)]
] -46.7 MRshow
1.000 UL
LTb
686 3785 M
63 0 V
6198 0 R
-63 0 V
stroke
602 3785 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 1)]
] -46.7 MRshow
1.000 UL
LTb
686 4202 M
63 0 V
6198 0 R
-63 0 V
stroke
602 4202 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 1.1)]
] -46.7 MRshow
1.000 UL
LTb
686 4619 M
63 0 V
6198 0 R
-63 0 V
stroke
602 4619 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 1.2)]
] -46.7 MRshow
1.000 UL
LTb
6947 448 M
0 63 V
0 4108 R
0 -63 V
stroke
6947 308 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MCshow
1.000 UL
LTb
6053 448 M
0 63 V
0 4108 R
0 -63 V
stroke
6053 308 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 5)]
] -46.7 MCshow
1.000 UL
LTb
5158 448 M
0 63 V
0 4108 R
0 -63 V
stroke
5158 308 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 10)]
] -46.7 MCshow
1.000 UL
LTb
4264 448 M
0 63 V
0 4108 R
0 -63 V
stroke
4264 308 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 15)]
] -46.7 MCshow
1.000 UL
LTb
3369 448 M
0 63 V
0 4108 R
0 -63 V
stroke
3369 308 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 20)]
] -46.7 MCshow
1.000 UL
LTb
2475 448 M
0 63 V
0 4108 R
0 -63 V
stroke
2475 308 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 25)]
] -46.7 MCshow
1.000 UL
LTb
1580 448 M
0 63 V
0 4108 R
0 -63 V
stroke
1580 308 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 30)]
] -46.7 MCshow
1.000 UL
LTb
686 448 M
0 63 V
0 4108 R
0 -63 V
stroke
686 308 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 35)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
686 4619 N
686 448 L
6261 0 V
0 4171 V
-6261 0 V
Z stroke
LCb setrgbcolor
112 2533 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 140.0 0.0 true true 0 (Omega Matter)]
] -46.7 MCshow
grestore
LTb
LCb setrgbcolor
3816 98 M
[ [(Helvetica) 140.0 0.0 true true 0 (Redshift)]
] -46.7 MCshow
LTb
3816 4829 M
[ [(Helvetica) 140.0 0.0 true true 0 (Omega Evolution, Resolution: 256)]
] -46.7 MCshow
10.000 UP
1.000 UL
LTb
% Begin plot #1
1.000 UL
LT0
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 5359 M
('omega_r256_h100_dr5d5_r256.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT0
5307 5359 M
966 0 V
1070 768 M
4083 87 V
647 64 V
291 54 V
171 48 V
115 43 V
83 39 V
64 36 V
51 34 V
42 30 V
35 31 V
30 28 V
26 28 V
23 26 V
20 24 V
18 23 V
16 23 V
15 24 V
14 21 V
12 20 V
12 21 V
11 23 V
10 24 V
9 26 V
9 21 V
8 16 V
8 16 V
7 15 V
7 13 V
7 10 V
6 11 V
6 10 V
6 8 V
6 7 V
5 7 V
% End plot #1
% Begin plot #2
stroke
LT1
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 5202 M
('omega_r256_h100_drd5_r256.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT1
5307 5202 M
966 0 V
1008 824 M
4881 404 V
433 285 V
184 230 V
105 177 V
70 152 V
50 117 V
38 108 V
30 77 V
24 66 V
21 68 V
17 60 V
15 42 V
13 42 V
11 31 V
10 29 V
9 27 V
8 25 V
8 20 V
6 22 V
% End plot #2
% Begin plot #3
stroke
LT2
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 5045 M
('omega_r256_h100_drd5_r256_2.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT2
5307 5045 M
966 0 V
1070 836 M
4083 237 V
647 180 V
291 153 V
171 132 V
115 123 V
83 107 V
64 92 V
51 84 V
42 74 V
35 72 V
30 65 V
26 64 V
23 58 V
20 58 V
18 49 V
16 44 V
15 38 V
14 40 V
12 43 V
12 37 V
11 31 V
10 28 V
9 26 V
9 23 V
8 24 V
8 22 V
7 21 V
7 22 V
7 20 V
6 19 V
6 18 V
6 16 V
6 16 V
5 14 V
% End plot #3
% Begin plot #4
stroke
LT3
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 4888 M
('omega_r256_h100_drd5r256_2_ling.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT3
5307 4888 M
966 0 V
3272 900 M
2687 429 V
388 297 V
172 227 V
101 172 V
67 144 V
48 121 V
37 104 V
30 77 V
24 74 V
20 66 V
17 46 V
14 40 V
13 36 V
11 34 V
10 30 V
9 25 V
8 23 V
7 22 V
7 18 V
% End plot #4
% Begin plot #5
stroke
LT4
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 4731 M
('omega_r256_h100_drdx_3_r256.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT4
5307 4731 M
966 0 V
1070 798 M
5153 939 L
647 97 V
291 79 V
171 68 V
115 58 V
83 52 V
64 44 V
51 41 V
42 36 V
35 37 V
30 32 V
26 29 V
23 27 V
20 25 V
18 22 V
16 19 V
15 17 V
14 15 V
12 16 V
12 14 V
11 14 V
10 13 V
9 14 V
9 12 V
8 11 V
8 11 V
7 11 V
7 12 V
7 12 V
6 11 V
6 9 V
6 6 V
6 7 V
5 8 V
% End plot #5
% Begin plot #6
stroke
LT5
% End plot #6
% Begin plot #7
1.000 UL
LT6
% End plot #7
% Begin plot #8
1.000 UL
LT7
% End plot #8
% Begin plot #9
1.000 UL
LT8
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 4574 M
('omega_r256_h100_mm_h.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT8
5307 4574 M
966 0 V
3665 915 M
1756 203 V
486 165 V
243 145 V
151 128 V
104 116 V
334 610 V
37 94 V
28 81 V
24 68 V
19 60 V
17 49 V
15 42 V
12 36 V
11 34 V
10 28 V
9 26 V
8 23 V
7 21 V
7 18 V
% End plot #9
% Begin plot #10
stroke
LT0
% End plot #10
% Begin plot #11
1.000 UL
LT1
% End plot #11
% Begin plot #12
1.000 UL
LT2
% End plot #12
% Begin plot #13
1.000 UL
LT3
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 4417 M
('omega_r256_h100_red_st14_log1.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT3
5307 4417 M
966 0 V
1008 789 M
5889 947 L
433 102 V
184 75 V
105 63 V
70 51 V
50 46 V
38 53 V
30 39 V
24 36 V
21 36 V
17 37 V
15 52 V
13 47 V
11 42 V
10 29 V
9 22 V
8 17 V
8 18 V
6 14 V
% End plot #13
% Begin plot #14
stroke
LT4
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 4260 M
('omega_r256_h100_red_st14_log2.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT4
5307 4260 M
966 0 V
1008 788 M
5889 942 L
433 94 V
184 77 V
105 63 V
70 50 V
50 47 V
38 41 V
30 44 V
24 28 V
21 31 V
17 24 V
15 27 V
13 33 V
11 45 V
10 54 V
9 33 V
8 25 V
8 18 V
6 16 V
% End plot #14
% Begin plot #15
stroke
LT5
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 4103 M
('omega_r256_h100_rst14lg3.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT5
5307 4103 M
966 0 V
1008 788 M
5889 944 L
433 97 V
184 76 V
105 64 V
70 51 V
50 45 V
38 45 V
30 42 V
24 32 V
21 31 V
17 29 V
15 33 V
13 50 V
11 56 V
10 36 V
9 24 V
8 20 V
8 17 V
6 14 V
% End plot #15
% Begin plot #16
stroke
LT6
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 3946 M
('omega_r256_h100_rst14log4.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT6
5307 3946 M
966 0 V
1008 788 M
5889 946 L
433 99 V
184 76 V
105 63 V
70 51 V
50 45 V
38 49 V
30 41 V
24 33 V
21 33 V
17 31 V
15 41 V
13 54 V
11 50 V
10 31 V
9 22 V
8 18 V
8 18 V
6 13 V
% End plot #16
% Begin plot #17
stroke
LT7
% End plot #17
% Begin plot #18
1.000 UL
LT8
% End plot #18
% Begin plot #19
1.000 UL
LT0
% End plot #19
% Begin plot #20
1.000 UL
LT1
% End plot #20
% Begin plot #21
1.000 UL
LT2
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 3789 M
('omega_r256_h100_stages_14.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT2
5307 3789 M
966 0 V
1008 770 M
5889 925 L
433 96 V
184 76 V
105 64 V
70 50 V
50 46 V
38 40 V
30 47 V
24 34 V
21 29 V
17 35 V
15 35 V
13 35 V
11 41 V
10 44 V
9 30 V
8 22 V
8 16 V
6 14 V
% End plot #21
% Begin plot #22
stroke
LT3
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 3632 M
('omega_r256_h100_stages_14e2.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT3
5307 3632 M
966 0 V
3272 896 M
2687 469 V
388 356 V
172 309 V
101 270 V
67 254 V
48 206 V
37 187 V
30 157 V
24 146 V
20 120 V
17 116 V
14 100 V
13 89 V
11 106 V
10 171 V
9 152 V
8 98 V
7 77 V
7 67 V
% End plot #22
% Begin plot #23
stroke
LT4
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 3475 M
('omega_r256_h100_stages14_ling.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT4
5307 3475 M
966 0 V
1008 770 M
5889 925 L
433 95 V
184 77 V
105 63 V
70 51 V
50 45 V
38 41 V
30 46 V
24 36 V
21 27 V
17 35 V
15 35 V
13 30 V
11 42 V
10 41 V
9 35 V
8 24 V
8 17 V
6 14 V
% End plot #23
% Begin plot #24
stroke
LT5
% End plot #24
% Begin plot #25
1.000 UL
LT6
% End plot #25
% Begin plot #26
1.000 UL
LT7
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 3318 M
('omega_r256_h100_stages_20.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT7
5307 3318 M
966 0 V
1008 807 M
4881 323 V
433 205 V
184 155 V
105 119 V
70 99 V
50 87 V
38 74 V
30 65 V
24 56 V
21 48 V
17 45 V
15 35 V
13 34 V
11 26 V
10 23 V
9 20 V
8 17 V
8 17 V
6 20 V
% End plot #26
% Begin plot #27
stroke
LT8
% End plot #27
% Begin plot #28
1.000 UL
LT0
% End plot #28
% Begin plot #29
1.000 UL
LT1
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 3161 M
('omega_r256_h100_stages_21.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT1
5307 3161 M
966 0 V
1008 807 M
4881 338 V
433 229 V
184 178 V
105 140 V
70 121 V
50 101 V
38 79 V
30 62 V
24 51 V
21 51 V
17 45 V
15 38 V
13 35 V
11 31 V
10 29 V
9 28 V
8 22 V
8 19 V
6 17 V
% End plot #29
% Begin plot #30
stroke
LT2
% End plot #30
% Begin plot #31
1.000 UL
LT3
% End plot #31
% Begin plot #32
1.000 UL
LT4
% End plot #32
% Begin plot #33
1.000 UL
LT5
% End plot #33
% Begin plot #34
1.000 UL
LT6
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 3004 M
('omega_r256_h100_stages51_ling.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT6
5307 3004 M
966 0 V
3272 878 M
2687 402 V
388 320 V
172 277 V
101 241 V
67 206 V
48 177 V
37 197 V
30 182 V
24 130 V
20 115 V
17 105 V
14 102 V
13 86 V
11 78 V
10 63 V
9 47 V
8 46 V
7 47 V
7 46 V
% End plot #34
% Begin plot #35
stroke
LT7
/Helvetica findfont 140 scalefont setfont
LCb setrgbcolor
/Helvetica findfont 50 scalefont setfont
5223 2847 M
('omega_r256_h100_stages_52.out' using 1:2) Rshow
/Helvetica findfont 140 scalefont setfont
LT7
5307 2847 M
966 0 V
3272 864 M
2687 351 V
388 279 V
172 245 V
101 214 V
67 182 V
48 140 V
37 139 V
30 116 V
24 99 V
20 81 V
17 78 V
14 76 V
13 59 V
11 45 V
10 39 V
9 39 V
8 36 V
7 28 V
7 24 V
% End plot #35
% Begin plot #36
stroke
LT8
% End plot #36
% Begin plot #37
1.000 UL
LT0
% End plot #37
1.000 UL
LTb
686 4619 N
686 448 L
6261 0 V
0 4171 V
-6261 0 V
Z stroke
10.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1
